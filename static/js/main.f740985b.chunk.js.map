{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Section/Section.js","App.js","index.js"],"names":["Statistics","this","props","good","neutral","bad","total","positivePercentage","Component","FeedbackOptions","options","map","option","className","onClick","onLeaveFeedback","type","Notification","message","Section","state","key","optionKey","toLowerCase","setState","preState","newState","countTotalFeedback","countPositiveFeedbackPercentage","positiveFeedbackPercentage","Math","round","title","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAGqBA,E,4JACnB,WACE,OACE,gCACE,4CACA,+BACE,wCAAWC,KAAKC,MAAMC,QACtB,2CAAcF,KAAKC,MAAME,WACzB,uCAAUH,KAAKC,MAAMG,OACrB,yCAAYJ,KAAKC,MAAMI,SACvB,qDAAwBL,KAAKC,MAAMK,mBAAnC,iB,GAV8BC,aCDnBC,E,4JACnB,WAAU,IAAD,OACP,OACE,8BACGR,KAAKC,MAAMQ,QAAQC,KAAI,SAAAC,GACtB,OACE,wBAEEC,UAAU,SACVC,QAAS,kBAAM,EAAKZ,MAAMa,gBAAgBH,IAC1CI,KAAK,SAJP,SAMGJ,GALIA,Y,GAP0BJ,aCAxBS,E,4JACnB,WACE,OAAO,4BAAIhB,KAAKC,MAAMgB,c,GAFgBV,aCGpCW,E,4MACJC,MAAQ,CACNjB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,QAAU,CAAC,OAAQ,UAAW,O,EAE9BK,gBAAkB,SAAAM,GAChB,IAAIC,EAAYD,EAAIE,cACpB,EAAKC,UAAS,SAAAC,GACZ,IAAMC,EAAWD,EAASH,GAAa,EACvC,OAAO,eAAGA,EAAYI,O,EAI1BC,mBAAqB,WACnB,OAAO,EAAKP,MAAMjB,KAAO,EAAKiB,MAAMhB,QAAU,EAAKgB,MAAMf,K,EAG3DuB,gCAAkC,WAChC,IAAIC,EAA6B,EAMjC,OALwB,IAApB,EAAKT,MAAMjB,OACb0B,EAA6BC,KAAKC,MAC/B,EAAKX,MAAMjB,KAAO,EAAKwB,qBAAwB,MAG7CE,G,4CAGT,WACE,MAA+B5B,KAAKmB,MAA5BjB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,gCACE,6BAAKJ,KAAKC,MAAM8B,QAEhB,cAAC,EAAD,CACEtB,QAAST,KAAKS,QACdK,gBAAiBd,KAAKc,kBAGO,IAA9Bd,KAAK0B,qBACJ,cAAC,EAAD,CACExB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOL,KAAK0B,qBACZpB,mBAAoBN,KAAK2B,oCAG3B,cAAC,EAAD,CAAcV,QAAQ,6B,GAnDVV,aA0DPW,IC3DTc,E,4JACJ,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,CAASmB,MAAM,mC,GALPxB,aAYHyB,ICXfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f740985b.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\n\nexport default class Statistics extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Statistics</h2>\n        <ul>\n          <li>Good: {this.props.good}</li>\n          <li>Neutral: {this.props.neutral}</li>\n          <li>Bad: {this.props.bad}</li>\n          <li>Total: {this.props.total}</li>\n          <li>Positive feedback: {this.props.positivePercentage}%</li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class FeedbackOptions extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.options.map(option => {\n          return (\n            <button\n              key={option}\n              className=\"button\"\n              onClick={() => this.props.onLeaveFeedback(option)}\n              type=\"button\"\n            >\n              {option}\n            </button>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Notification extends Component {\n  render() {\n    return <p>{this.props.message}</p>;\n  }\n}\n","import React, { Component } from 'react';\nimport Statistics from '../Statistics';\nimport FeedbackOptions from '../FeedbackOptions';\nimport Notification from '../Notification';\n\nclass Section extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  options = ['Good', 'Neutral', 'Bad'];\n\n  onLeaveFeedback = key => {\n    let optionKey = key.toLowerCase();\n    this.setState(preState => {\n      const newState = preState[optionKey] + 1;\n      return { [optionKey]: newState };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    let positiveFeedbackPercentage = 0;\n    if (this.state.good !== 0) {\n      positiveFeedbackPercentage = Math.round(\n        (this.state.good / this.countTotalFeedback()) * 100,\n      );\n    }\n    return positiveFeedbackPercentage;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div>\n        <h2>{this.props.title}</h2>\n\n        <FeedbackOptions\n          options={this.options}\n          onLeaveFeedback={this.onLeaveFeedback}\n        />\n\n        {this.countTotalFeedback() !== 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Section;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Section from './components/Section';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Section title=\"Please, leave feedback\" />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}